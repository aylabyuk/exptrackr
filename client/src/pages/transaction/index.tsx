import React, { useState } from 'react'
import Head from 'next/head'

import TextField from '../../components/base/TextField/TextField'
import SearchIcon from '../../components/vectors/SearchIcon'
import clsx from 'clsx'
import { useAppSelector } from '../../redux/hooks'
import { selectOpenModals } from '../../redux/features/ui/ui-reducer'
import { useSearchQuery } from '../../redux/features/record/record-api'
import CardTransaction from '../../components/features/CardTransaction/CardTransaction'
import Spinner from '../../components/vectors/Spinner'
import AdjustmentsIcon from '../../components/vectors/AdjustmentsIcon'

export const TransactionPage: React.FC = () => {
  const [search, setSearch] = useState('')

  const {
    data: transactions,
    isLoading,
    isFetching,
  } = useSearchQuery({ search })

  const openModals = useAppSelector(selectOpenModals)

  const handleSearch = (e: any) => {
    setSearch(e.target.value)
  }

  return (
    <>
      <Head>
        <title>Expense Tracker - Transactions</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="w-full">
        <div className="flex sticky top-0 flex-col items-end p-4 bg-light-60">
          <button className="p-1 mb-3 text-dark-25 rounded-lg border-[1px] border-light-20">
            <AdjustmentsIcon />
          </button>

          <TextField
            placeholder="Search transactions"
            name="search"
            endAdornment={
              <button>
                <SearchIcon />
              </button>
            }
            onChange={handleSearch}
          />
        </div>

        <div
          className={clsx(
            'flex flex-col justify-start items-center pb-4 mb-20 w-full h-full',
            openModals?.length ? 'overflow-y-hidden' : 'overflow-y-scroll',
          )}
        >
          {(isLoading || isFetching) && <Spinner className="mt-6" show />}

          {transactions?.map((transaction) => {
            return (
              <CardTransaction
                key={transaction._id}
                amount={transaction.amount}
                category={transaction.category.name}
                date={transaction.createdAt}
                description={transaction.description}
                icon={transaction.category.icon}
              />
            )
          })}
        </div>
      </div>
    </>
  )
}

export default TransactionPage
